var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"DocTestSetup  = quote\n    using PropDicts\nend","category":"page"},{"location":"api/#Types","page":"API","title":"Types","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Order = [:type]","category":"page"},{"location":"api/#Functions-and-macros","page":"API","title":"Functions and macros","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Order = [:macro, :function]","category":"page"},{"location":"api/#Documentation","page":"API","title":"Documentation","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [PropDicts]\nOrder = [:type, :macro, :function]","category":"page"},{"location":"api/#PropDicts.PropDict","page":"API","title":"PropDicts.PropDict","text":"PropDict <: AbstractDict{Union{Symbol,Int},Any}\n\nPropDicts is a dictionary for that supports\n\nConstructors:\n\nPropDict(dict::AbstractDict)\n\nPropDict(key1 => value, key2 => value2, ...)\n\nDuring construction, keys are automatically converted to Symbols and Ints, values that are dicts are converted to PropDicts.\n\nPropDict support deep merging:\n\nx = PropDict(:a => PropDict(:b => 7, :c => 5, :d => 2), :e => \"foo\")\ny = PropDict(:a => PropDict(:c => 42, :d => nothing), :f => \"bar\")\n\nz = merge(x, y)\n@assert z == PropDict(\n    :a => PropDict(:b=>7, :d => nothing, :c => 42),\n    :e => \"foo\", :f => \"bar\"\n)\n\nPropDicts.trim_null!(z)\n@assert z == PropDict(\n    :a => PropDict(:b=>7, :c => 42),\n    :e => \"foo\", :f => \"bar\"\n)\n\n\n\n\n\n","category":"type"},{"location":"api/#PropDicts.trim_null!","page":"API","title":"PropDicts.trim_null!","text":"trim_null!(d::AbstractDict; recursive::Bool = true)\n\nRemove values equal to nothing from d.\n\nOperates recursively on values in d if recursive == true.\n\n\n\n\n\n","category":"function"},{"location":"LICENSE/#LICENSE","page":"LICENSE","title":"LICENSE","text":"","category":"section"},{"location":"LICENSE/","page":"LICENSE","title":"LICENSE","text":"using Markdown\nMarkdown.parse_file(joinpath(@__DIR__, \"..\", \"..\", \"LICENSE.md\"))","category":"page"},{"location":"#PropDicts.jl","page":"Home","title":"PropDicts.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PropDicts implements dictionaries that handle hierarchical property/value data.","category":"page"},{"location":"","page":"Home","title":"Home","text":"PropDict is a special kind of AbstractDict that supports deep merging. A typicial use case is cascading-configuration: A basic configuration can be modified by additional configuration PropDicts that only replace, amend or remove specific parts of it.","category":"page"},{"location":"","page":"Home","title":"Home","text":"In addition, there is support for variable substitution, to make it possible to refer to environment variables and application-specific variables in configuration data.","category":"page"}]
}
